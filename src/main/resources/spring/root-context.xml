<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->


	<!-- root-context.xml web.xml 파일이 가장 먼저 읽어 들이는 설정 파일 프로젝트 전체에 공유되는 자원(DB연결, 
		트랜잭션처리, 파일업로드 등) 설정 내용을 작성 -->

	<!-- DBCP 사용을 위한 DataSource를 Bean으로 등록 -->
	<!-- DataSource란? : java에서 Connection Pool을 지원하기 위한 인터페이스 -->
	<!-- BasicDataSource : DataSource인터페이스를 구현한 클래스, 아파치 commons.dbcp에서 제공 -->
	<!-- destroy-method="close" : 주어진 세션을 자동으로 반환(close)하라는 설정 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@115.90.212.22:9000:xe" />
		<property name="username" value="tteuttoDB" />
		<property name="password" value="tteutto1234!" />

		<!-- defaultAutoCommit: SQL 수행 후 자동 COMMIT 설정. (기본값 : true) -->
		<property name="defaultAutoCommit" value="false" />

		<!-- 커넥션 풀 설정 -->
		<property name="initialSize" value="10" /> <!-- 초기 커넥션 수, 기본 0 -->
		<property name="maxTotal" value="500" /> <!-- 최대 커넥션 수, 기본 8 -->
		<property name="maxIdle" value="100" /> <!-- 유휴 상태로 존재할 수 있는 커넥션 최대 수, 기본 8 -->
		<property name="minIdle" value="10" /> <!-- 유휴 상태로 존재할 수 있는 커넥션 최소 수, 기본 0 -->
		<property name="maxWaitMillis" value="-1" /> <!-- 예외 발생 전 커넥션이 반환 될 떄 까지 대기하는 최대 시간(ms), 기본 -1(무기한) -->
	</bean>

	<!-- SqlSession : sql구문을 DB에 전달, 실행하는 객체 SqlSessionFactory : SqlSession을 
		만드는 객체 sqlSessionFactoryBean : mybatis 설정 파일(mybatis-config.xml)과 Connection 
		Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체 sqlSessionTemplate : SqlSession 객체에 
		트랜잭션 처리 역할이 가능하도록 하는 객체 -->

	<!-- 마이바티스 SqlSession 등록하기 (xml 방식으로 bean 등록) -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybatis-config.xml 설정 불러오기 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- SqlSessionTemplate : 기본 SQL 실행 + 트랜잭션 관리 역할을 하는 SqlSession을 생성할 수 있게 
		하는 객체(Spring bean으로 등록해야함.) -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>

	<!-- 스프링에서 사용하는 proxy를 이용한 트랜잭션 제어가 안될 경우 추가적인 트랜잭션 매니저를 추가해서 문제 해결 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- @Transactional 어노테이션을 스캔해서 인식하는 역할 -->
	<tx:annotation-driven />

	<!-- 파일 업로드를 위한 MultipartResolver 구현체 Bean 등록 -->
	<!-- multipart/form-data 요청 시 input type="file" 요소의 파라미터를 자동으로 인식하여 MultipartFile 
		객체로 반환하고 나머지 파라미터는 기존처럼 사용 가능하게 만드는 역할. -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxUploadSizePerFile" value="104857600" />
		<property name="maxInMemorySize" value="104857600" />
	</bean>
	<!-- maxUploadSize : 한 요청당 허용되는 최대 용량(byte 단위), 무제한은 -1(기본값) maxUploadSizePerFile 
		: 한 파일당 허용되는 최대 용량(byte 단위), 무제한은 -1(기본값) maxInMemorySize : 디스크에 저장하지 않고 
		메모리에 유지하도록 허용하는 최대 용량(byte 단위) 지정된 용량을 초과할 경우 자동으로 파일이 저장된다. 기본값 10240byte(10KB) 
		104857600byte == 100MB -->

	<!-- gmail설정 -->
	<bean id="mailSender2" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="sseungjoon0319@gmail.com" /> <!-- 자신의 이메일 아이디 -->
		<property name="password" value="joon1234!" /> <!-- 자신의 비밀번호 -->
		<!-- 보안연결 TLS과 관련된 설정 -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
			</props>
		</property>
	</bean>


</beans>
